% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_da_forecast_all.R
\name{run_da_forecast_all}
\alias{run_da_forecast_all}
\title{Run ensemble data assimilation and/or produce forecasts}
\usage{
run_da_forecast_all(
  states_init,
  pars_init = NULL,
  aux_states_init,
  obs,
  obs_sd,
  model_sd,
  working_directory,
  met_file_names,
  inflow_file_names = NULL,
  outflow_file_names = NULL,
  config,
  pars_config = NULL,
  states_config,
  obs_config,
  management = NULL,
  da_method = "enkf",
  par_fit_method = "inflate",
  debug = FALSE
)
}
\arguments{
\item{states_init}{array of the initial states.  Required dimensions are \verb{[states, depths, ensemble]}}

\item{pars_init}{array of the initial states.  Required dimensions are \verb{[pars, depths, ensemble]}.  (Default = NULL)}

\item{aux_states_init}{list of initial conditions for auxillary states.  These are states in the GLM that
are require for restarting the model but are not included in data assimilation.  These are states that are not associated
with a value in \code{model_sd}.}

\item{obs}{array; array of the observations. Required dimensions are \verb{[nobs, time, depth]}}

\item{obs_sd}{vector; vector of standard deviation for observation}

\item{model_sd}{vector vector of standard deviations describing the model error for each state}

\item{working_directory}{string; full path to directory where model executes}

\item{met_file_names}{vector; vector of full path meteorology file names}

\item{inflow_file_names}{vector or matrix;; vector of inflow file names}

\item{outflow_file_names}{vector or matrix; vector of outflow file names}

\item{config}{list; list of configurations}

\item{pars_config}{list; list of parameter configurations  (Default = NULL)}

\item{states_config}{list; list of state configurations}

\item{obs_config}{list; list of observation configurations}

\item{management}{list; list of management inputs and configuration  (Default = NULL)}

\item{da_method}{string; data assimilation method (enkf or pf; Default = enkf)}

\item{par_fit_method}{string; method for adding noise to parameters during calibration}

\item{debug}{boolean; add extra diagnostics for debugging (Default = FALSE)}
}
\value{
a list is passed to \code{write_forecast_netcdf()} to write the
netcdf output and \code{create_flare_eml()} to generate the EML metadata
}
\description{
Run ensemble data assimilation and/or produce forecasts
}
\details{
Uses the ensemble data assimilation to predict water quality for a lake
or reservoir.  The function requires the initial conditions (\code{states_init}) for each
state and ensemble member using an array with the following dimension order:
states, depth, ensembles member.  If you are fitting parameters, it also requires
initial conditions for each parameter and ensemble member using an array (\code{par_init}) with the
following dimension order: parameters, ensemble member.  The arrays for states_init
and pars_init can be created using the \code{generate_initial_conditions()} function, if
starting from initial conditions in the  \code{states_config} data frame or from observations
in first time column of the \code{obs} array.
}
\examples{
\dontrun{
da_forecast_output <- FLAREr::run_da_forecast(states_init = init$states, pars_init = init$pars, aux_states_init = init$aux_states_init, obs = obs, obs_sd = obs_config$obs_sd, model_sd = model_sd, working_directory = config$file_path$execute_directory, met_file_names = met_file_names, inflow_file_names = inflow_file_names, outflow_file_names = outflow_file_names, config = config, pars_config = pars_config, states_config = states_config, obs_config = obs_config)
}
}
